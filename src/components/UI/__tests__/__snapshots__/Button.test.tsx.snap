// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`[Button] [ThemeType.Light] renders without crashing 1`] = `
<View
  activeOpacity={0.7}
  delayPressIn={50}
  onPress={[MockFunction]}
  testID="btn"
>
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "alignItems": "center",
          "alignSelf": "stretch",
          "borderRadius": 6,
          "flexDirection": "row",
          "justifyContent": "center",
          "paddingLeft": 16,
          "paddingRight": 16,
        },
        undefined,
        false,
        undefined,
      ]
    }
  >
    <Text
      style={
        Array [
          Object {
            "color": "#069ccd",
            "fontSize": 14,
            "paddingVertical": 12,
          },
          undefined,
          undefined,
        ]
      }
    />
  </View>
</View>
`;

exports[`[Button] should render [ThemeType.Dark] without crashing 1`] = `
<View
  activeOpacity={0.7}
  delayPressIn={50}
  onPress={[MockFunction]}
  testID="btn"
>
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "alignItems": "center",
          "alignSelf": "stretch",
          "borderRadius": 6,
          "flexDirection": "row",
          "justifyContent": "center",
          "paddingLeft": 16,
          "paddingRight": 16,
        },
        undefined,
        false,
        undefined,
      ]
    }
  >
    <Text
      style={
        Array [
          Object {
            "color": "#069ccd",
            "fontSize": 14,
            "paddingVertical": 12,
          },
          undefined,
          undefined,
        ]
      }
    />
  </View>
</View>
`;

exports[`[Button] should render [isDisabled] status without crashing 1`] = `
<View
  activeOpacity={0.7}
  delayPressIn={50}
  onPress={[MockFunction]}
  testID="btn"
>
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "alignItems": "center",
          "alignSelf": "stretch",
          "borderRadius": 6,
          "flexDirection": "row",
          "justifyContent": "center",
          "paddingLeft": 16,
          "paddingRight": 16,
        },
        undefined,
        false,
        undefined,
      ]
    }
  >
    <Text
      style={
        Array [
          Object {
            "color": "#069ccd",
            "fontSize": 14,
            "paddingVertical": 12,
          },
          undefined,
          undefined,
        ]
      }
    />
  </View>
</View>
`;

exports[`[Button] should render [isLoading] status without crashing 1`] = `
<View
  activeOpacity={0.7}
  delayPressIn={50}
  onPress={[MockFunction]}
  testID="btn"
>
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "alignItems": "center",
          "alignSelf": "stretch",
          "borderRadius": 6,
          "flexDirection": "row",
          "justifyContent": "center",
          "paddingLeft": 16,
          "paddingRight": 16,
        },
        undefined,
        false,
        undefined,
      ]
    }
  >
    <Text
      style={
        Array [
          Object {
            "color": "#069ccd",
            "fontSize": 14,
            "paddingVertical": 12,
          },
          undefined,
          undefined,
        ]
      }
    />
  </View>
</View>
`;
